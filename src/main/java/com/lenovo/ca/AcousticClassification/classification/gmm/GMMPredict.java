package com.lenovo.ca.AcousticClassification.classification.gmm;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.lenovo.ca.AcousticClassification.utils.FileUtils;

public class GMMPredict implements Serializable{
	
	private static final long serialVersionUID = 1L;
	private double[][] means = null;
	private double[][] covars = null;
	private double[] weights = null;
	

	public GMMPredict(String modelFilePath){
		List<String> textList = FileUtils.readLines(modelFilePath);
		
		for(String text : textList){
			if(text.startsWith("means:")){
				this.means = convert2DoubleArray(text.replace("means:", ""));
			}else if(text.startsWith("weights:")){
				this.weights=convert2DoubleArray(text.replace("weights:", ""))[0];
			}else if(text.startsWith("covars:")){
				this.covars=convert2DoubleArray(text.replace("covars:", ""));
			}
		}
	}
	
	public GMMPredict(double[][] means, double[][] covars, double[] weights){
		this.means = means;
		this.covars=covars;
		this.weights=weights;
	}
	
	public double[][] getMeans(){
		return this.means;
	}
	
	public double[][] getCovars(){
		return this.covars;
	}
	
	public double[] getWeights(){
		return this.weights;
	}
	
	
	public double getScore(double[][] data){
		double score = 0;
		double[] logprob = null;
		
		try{
			double[][] lpr = log_multivariate_normal_density(data, this.means, this.covars);
			lpr = Matrixes.addValue(lpr, Matrixes.makeLog(this.weights));
			logprob = Matrixes.logsumexp(lpr);
			score = Statistics.getMean(logprob);
		}
		catch(Exception myEx)
        {
            myEx.printStackTrace();
            System.exit(1);
        }
		
		return score;
	}
	
	private double[][] log_multivariate_normal_density(double[][] data, double[][] means, double[][] covars){
		//diagonal type
		double[][] lpr = new double[data.length][means.length];
		//int n_samples = data.length;
		int n_dim = data[0].length;
		
		try{
			double[] sumLogCov = Matrixes.sum(Matrixes.makeLog(covars), 1); //np.sum(np.log(covars), 1)
			double[] sumDivMeanCov = Matrixes.sum(Matrixes.divideElements(Matrixes.power(this.means, 2), this.covars),1); //np.sum((means ** 2) / covars, 1)
			double[][] dotXdivMeanCovT = Matrixes.multiplyByValue(Matrixes.multiplyByMatrix(data, Matrixes.transpose(Matrixes.divideElements(means, covars))), -2); //- 2 * np.dot(X, (means / covars).T)
			//double[][] q1 = Matrixes.divideElements(means, covars);
			//double[][] q2 = Matrixes.transpose(Matrixes.divideElements(means, covars));
			//double[][] q3 = Matrixes.multiplyByMatrix(data, q2);
			//double[][] q4 = Matrixes.multiplyByValue(q3, -2);
			double[][] dotXdivOneCovT = Matrixes.multiplyByMatrix(Matrixes.power(data,  2), Matrixes.transpose(Matrixes.invertElements(covars)));
			
			
			sumLogCov = Matrixes.addValue(sumLogCov,n_dim * Math.log(2*Math.PI)); //n_dim * np.log(2 * np.pi) + np.sum(np.log(covars), 1)
			sumDivMeanCov = Matrixes.addMatrixes(sumDivMeanCov, sumLogCov); // n_dim * np.log(2 * np.pi) + np.sum(np.log(covars), 1) + np.sum((means ** 2) / covars, 1)
			dotXdivOneCovT = Matrixes.sum(dotXdivOneCovT, dotXdivMeanCovT); //- 2 * np.dot(X, (means / covars).T) + np.dot(X ** 2, (1.0 / covars).T)
			dotXdivOneCovT = Matrixes.addValue(dotXdivOneCovT, sumDivMeanCov); // (n_dim * np.log(2 * np.pi) + np.sum(np.log(covars), 1) + np.sum((means ** 2) / covars, 1) - 2 * np.dot(X, (means / covars).T) + np.dot(X ** 2, (1.0 / covars).T))
			lpr = Matrixes.multiplyByValue(dotXdivOneCovT, -0.5);
		}
		catch(Exception myEx)
        {
			System.out.println("An exception encourred: " + myEx.getMessage());
            myEx.printStackTrace();
            System.exit(1);		            
        }
		
		return lpr;
	}
	public static void main(String[] args) {
		predictAge();
		
//		List<String> lines = FileUtils.readLines("data/iris_2.csv");
//		double[][] datas = new double[20][4];
//		for (int i = 1; i < 20; i++) {
//			String line = lines.get(i);
//			String[] attrs = line.split(",");
//			double[] feature = new double[4];
//			for (int j = 0; j < attrs.length - 1; j++) {
//				feature[j] = Double.parseDouble(attrs[j]);
//			}
//			datas[i - 1] = feature;
//		}

//		double[][] means_0 =
//			{{ 5.0072214,   3.50194429,  1.7086149,   0.4022295},
//				 { 5.51404895,  4.02197723,  1.4736248,   0.28360932},
//				 { 4.47976298,  3.17803168,  1.27327415,  0.1978135 },
//				 { 4.83517779,  3.09672844,  1.46022116,  0.17492808},
//				 { 5.15391152,  3.51936523,  1.46956546,  0.23835862},
//				 { 4.5,         2.29999995,  1.29999995,  0.30000001}};
//			double[] weights_0 = {0.11362695,  0.14787263,  0.14111914,  0.23933641,  0.33804494,  0.01999993};
//			double[][] covars_0 =
//			{{ 0.01418472,  0.03320124,  0.02413646,  0.01969918},
//			 { 0.04300658,  0.04400013,  0.03071881,  0.0133172 },
//			 { 0.0172197,   0.05259162,  0.02443707,  0.00363151},
//			 { 0.01571374,  0.00796554,  0.01414549,  0.00452658},
//			 { 0.03500702,  0.02249606,  0.01143923,  0.0054648 },
//			 { 0.001,       0.001,       0.001,       0.001     }};
//		GMMPredict gmm_0 = new GMMPredict(means_0, covars_0, weights_0);
////		GMMPredict gmm_1 = new GMMPredict(means_1, covars_1, weights_1);
////		GMMPredict gmm_2 = new GMMPredict(means_2, covars_2, weights_2);
//		double[][] datas={{5.9,3,4.2,1.5}};
//		double score_0 = gmm_0.getScore(datas);
////		double score_1 = gmm_1.getScore(datas);
////		double score_2 = gmm_2.getScore(datas);
//		System.out.println(score_0);
//		System.out.println(score_1);
//		System.out.println(score_2);
		
	}
	
	
	private static void predictAge(){
		
//		double[][] means_young=convert2DoubleArray("{{ -8.29817518e+00,-9.10571356e+01,-2.73326277e+00,-8.58854464e+01,1.08075187e+00,-8.01869889e+01, 3.06166561e+01,-9.78683998e+01,5.49459938e+01,-9.53762179e+01, 4.90338689e+01,-8.24389549e+01, -7.98827228e+00,-8.73995666e+01,-2.75911165e+00,-8.17507264e+01,1.75110785e+00,-7.82247238e+01, 3.00135813e+01,-9.39318643e+01,5.34569314e+01,-9.19046470e+01, 4.73646202e+01,-8.02704847e+01},{ -2.30262893e+01,-6.89891032e+01,-1.10500927e-01,-1.05977429e+02,2.44635425e+01,-9.43732888e+01, 4.43851669e+01,-1.07091365e+02,5.16492411e+01,-1.15320382e+02, 3.15527144e+01,-1.07412525e+02, -7.43857022e-01, 1.86382999e+00, 1.15953838e+00, 1.55732219e-01, -3.70578534e-03,-4.04296753e-01, 1.33825261e+00, 3.56915340e-01,1.76755223e+00, 6.33420327e-01, 1.72026486e+00,-1.04730944e-01},{ -1.30334891e+01,-7.73817877e+01, 2.57754690e+00,-8.85242464e+01,2.69091594e+01,-7.79502546e+01, 4.25025813e+01,-9.16816821e+01,2.84239571e+01,-9.02034810e+01, 2.19047464e+01,-6.39924296e+01,2.01410195e+00,-6.61681263e+00,-9.27212136e-01,-2.96125058e+00, -2.44712332e+00, 1.56863585e+00,-2.75560490e+00, 1.65568513e+00, -2.27812400e+00, 1.02094248e+00,-2.28340537e+00, 2.13560008e+00},{3.69755374e+01,-1.20863829e+02, 2.05520142e+01,-6.73469475e+01,4.65578871e+00,-3.40713226e+01,-2.32914417e+00,-2.17208255e+01, -1.90274228e+01,-1.47571543e+01,-1.83404885e+01,-3.58150952e+01, -3.07611348e+00, 5.10764371e+00,-2.85929598e-01, 2.36675258e-01,2.69919822e+00,-3.77588289e+00, 3.57396513e+00,-4.11680394e+00,4.81722342e+00,-3.01298072e+00, 3.14311791e+00,-1.52969760e+00},{ -5.70605907e+01,-1.04302068e+02,-2.65155499e+01,-1.04165436e+02, -1.34268799e+01,-1.14549718e+02,-9.54147376e+00,-9.28828230e+01,1.52786804e+02, 7.92993573e+01, 1.70172175e+02,-1.20419932e+02,6.70349409e-01,-1.92056230e+00,-1.99024168e+00, 1.29915047e+00, -5.43338885e-01,-2.68162281e+00,-6.10245691e+00,-7.77052471e+00, -5.77332981e+00, 3.00675044e+00, 7.62659955e+00, 1.15759435e+01},{ -3.94949144e+01,-8.33268110e+01,-1.58559827e+01,-1.09081016e+02, -7.27253484e+00,-1.39478596e+02,-3.31134526e+01,-1.74656733e+02,3.62080218e+00,-8.19327177e+01, 1.45622481e+02, 5.52141261e+01,1.06401589e-01, 1.51958404e+00, 1.33540461e+00,-2.14292131e-02,1.71058973e+00, 1.81009440e+00,-2.67146320e-01,-3.64795184e-01, -1.98607322e+00,-5.76873065e+00,-5.40356746e+00,-3.35467730e+00},{ -2.30683356e+01,-5.60594893e+01, 2.50218673e+01,-4.76683607e+01,3.68405268e+01,-5.15089545e+01, 5.00786165e+01,-5.97846105e+01,5.23871063e+01,-5.99301637e+01, 5.08004831e+01,-6.00894151e+01, -6.07280442e-01, 1.49753823e+00, 1.18249934e-01, 1.83252097e-01,1.23852481e-01, 4.38041014e-01,-2.63354462e-01, 7.05640285e-01, -5.70577161e-02, 1.85093190e-01, 6.80835908e-01,-1.27059541e+00},{ -8.81422014e+01,-9.65526471e+01,-2.05912351e+01,-1.18815531e+02, -2.01081193e+01,-9.21740390e+01, 1.08879505e+02, 4.91878853e+01,2.33120512e+02,-7.97727021e+01,-7.38006754e+01,-1.66976222e+02,8.11505253e-01,-6.99572537e+00,-1.19126836e+00, 2.23396330e+00, -1.95379701e+00,-1.72516931e-02,-5.09156529e+00, 3.02127855e+00, -1.43245410e-01, 2.44627559e+00, 6.90407031e-01,-2.56839069e+00},{1.80393357e+01,-6.35094618e+01,-4.99139497e+01,-2.90886142e+01, -6.12726396e+01,-5.94958379e+01, 6.90901994e+01,-1.38079125e+02,1.00589186e+02,-1.53157309e+02, 3.16709989e+01,-1.10940223e+02, -7.11740928e-01, 2.25135405e+00, 1.20246832e+00,-2.36476418e+00,3.11360267e+00,-1.51130466e+00,-4.60280117e-01, 1.16807459e+00, -1.49968491e+00, 1.13996511e+00,-1.15436213e+00,-1.56442330e-01},{2.35461186e+01,-1.31766881e+02,-6.93578534e+00,-3.92352103e+01, -7.25143547e+01, 1.11876745e+01,-4.09035744e+01,-6.57878976e+01,2.65506168e+01,-1.16228208e+02, 5.81329289e+01,-1.06687206e+02,3.54976944e+00,-4.35961209e+00,-1.92000111e+00, 4.05639343e+00, -2.96116595e+00, 4.69651042e+00,-1.12172047e+00, 2.55578339e+00, -5.48582465e+00, 1.25701376e-01,-5.50363534e+00, 4.09369677e-02}}");
//		double[] weights_young=convert2DoubleArray("{0.06617194,0.24961952,0.14477827,0.12099375,0.04471206,0.06222608,0.10073575,0.02529172,0.093892,0.09157889}")[0];
//		double[][] covars_young=convert2DoubleArray("{{2825.21028986, 4235.28690108, 4072.97165008, 5460.47888334,6042.47098753, 6507.10716037, 7404.72217381, 7917.28705394,9188.22124685,10218.137343, 9920.64269343,10039.16228719,2747.43400904, 4477.24497031, 3973.28293716, 5558.10810813,5861.45576332, 6429.67216444, 7157.88209975, 7905.74268348,8975.82576236,10415.77691814, 9744.65379814,10102.77229474},{1085.77632033, 2008.05219016, 1936.4270755,2401.48865496,2581.52200259, 2662.39382343, 3038.95040721, 3018.42223097,3824.91965685, 3928.25267452, 4477.86917155, 4354.28717059, 125.01420259,213.58537152,246.75198095,356.5460613, 455.41440723,507.53683007,625.80142106,695.05509611, 756.36192079,757.67216978,758.34463912,775.32015689},{2579.56920109, 4009.33007417, 3648.59892595, 4440.50027784,4727.88630723, 5028.66232096, 6060.52750121, 6061.31328261,7134.87190439, 7286.91330646, 8506.02132901, 7545.45166554, 580.58474142,793.38546205,850.4605301,1159.77534173,1392.28096448, 1620.55821468, 1911.63522932, 1968.96437064,2272.85786172, 2148.01746672, 2492.06897124, 2262.9441204 },{1744.24117406, 3464.04748542, 4392.20846957, 4422.5224458,4126.31672218, 4875.01024954, 5303.14946352, 4339.81163663,5056.0495643,5406.19079537, 5658.15880504, 8115.01391693, 146.66865826,307.97083656,369.4879033, 443.48774334, 518.47511819,586.39949689,710.35954575,801.13066719, 865.32192297,921.55162242,953.86909346,951.78670598},{1860.20143758, 2600.05197949, 2814.51128331, 3609.47678823,4438.31719978, 3977.52311697, 5618.69741906, 6096.14327197,5492.03078565, 7455.27890165, 8806.56820181,10614.60018216, 179.67234054,302.17529946,415.38329778,668.34129855, 787.37836249,881.42009075, 1192.48408995, 1352.33103194,1996.89718412, 2379.43928111, 1930.31117467, 2449.99843905},{1367.60131257, 2876.25189638, 1830.52587557, 2705.51227826,3093.13629297, 4419.25872093, 3531.32830218, 4005.28056336,4990.06425368, 7531.35097024, 8229.47226195, 8238.15396835, 150.54160972,288.37006632,287.44065428,410.32312924, 545.06552783,788.87951497,893.3296752, 786.96099037,1105.40307342, 1369.64989533, 1620.82830476, 1473.8681273 },{ 891.37268278, 1601.55914163,744.38289745, 1744.74598262,1776.64611089, 2023.38366954, 2067.21383301, 2175.45628583,2141.25995733, 2118.61561849, 1981.76446232, 2330.58515915,45.34125061, 69.02369393, 81.60176119,136.96805214, 185.17312065,269.41874283,310.16757132,285.56873776, 340.05343748,283.92294469,292.91835799,298.21578332},{1185.43262517, 2361.05605879, 2118.15652584, 4205.47524565,3586.31619606, 3114.15949044, 5651.95164535, 4846.31990144,6240.15772255,12312.8011973,8945.47894762,10476.62797778, 213.74329196,324.09245363,445.29053765,582.24123525, 690.3604245, 734.30452383, 1394.74135709, 1520.22717388,1755.33345209, 2410.41554103, 3224.37744018, 1931.43752059},{1211.16901126, 4900.47431461, 4772.63932296, 3671.97622563,4459.90470042, 5077.05435939, 6671.98307293, 7600.17084026,7342.97901436, 8178.78235608, 8794.25477418,12390.56416309, 119.83399843,208.14764496,360.68662277,434.56614923, 576.66181802,619.68621022,771.83680867,874.14854973, 905.33881649, 1046.18311195,893.87587259,953.62087771},{2050.06744547, 3756.42219171, 3215.04477059, 4443.95200116,3682.23045691, 4586.27839667, 6175.23425468, 6674.89301068,8245.37742379, 9404.94447744,11143.05939171,12565.65470232, 311.97695095,645.1685825, 559.74465535,807.68002476,1012.03423304, 1250.5964685,1387.23406315, 1667.91005428,1788.57593477, 2322.36093371, 2245.96737442, 2577.50035027}}");
//		GMMPredict gmm_young = new GMMPredict(means_young, covars_young, weights_young);
		GMMPredict gmm_young = new GMMPredict("models/_young.model");

		
//		double[][] means_old=convert2DoubleArray("{{1.74591529e+00,-2.28816986e+01, 2.57651063e+01,-5.73920828e+01,3.15992881e+01,-5.56235090e+01, 4.89904593e+01,-7.12334579e+01,6.43999253e+01,-5.77575799e+01, 6.18249007e+01,-5.44843239e+01, -1.44552625e+01,-1.48015291e+01, 1.33374655e+01,-3.40312740e+01,2.58090196e+01,-4.11359088e+01, 4.33882972e+01,-5.56631575e+01,5.71795826e+01,-5.10501108e+01, 5.31238743e+01,-4.35972353e+01},{ -1.42305802e+01,-3.16289277e+01, 2.82121800e+01,-4.69826368e+01,4.32926612e+01,-6.00517536e+01, 6.01263605e+01,-6.60525770e+01,6.86592906e+01,-5.10639608e+01, 7.08586329e+01,-5.46926194e+01, -9.81936257e-01, 3.53514660e-01, 5.60835076e-01, 8.11564267e-01,1.44260542e-01,-8.22121601e-01,-8.88133066e-01,-1.79797725e-01,1.03506022e+00,-2.75106848e-01, 1.11708194e+00, 1.45733432e-01},{ -7.80745405e+00,-2.50923148e+01, 3.33833110e+01,-7.25130835e+01,3.73409147e+01,-6.82253867e+01, 5.82596935e+01,-8.43000823e+01,6.87909444e+01,-6.95089215e+01, 6.42952051e+01,-6.42204728e+01, -8.52325661e-01,-5.55695592e-01, 4.76225472e-01,-6.00073456e-02, -8.60255983e-01,-1.07287543e+00, 3.08095284e-01,-1.58283388e+00, -8.56628365e-01, 3.55644602e-01, 2.78753947e-01,-3.24118940e-01},{1.55700967e+01,-4.25142731e+01,-2.79452939e+00,-4.43030506e+01, -1.22540539e+01,-5.54263959e+01, 1.31553478e+01,-1.21981018e+02,5.82500062e+01,-8.12608578e+01, 5.93022764e+01,-7.49654257e+01,7.01582269e+00,-4.79258525e+00,-1.07243656e+00, 1.05712488e+00, -5.38098915e+00, 6.81319310e+00,-7.33300234e+00, 5.44872337e+00, -5.67720735e+00, 1.91746677e+00,-3.53386335e+00,-1.24306250e+00},{7.13263597e+01,-7.11079116e+01, 5.33545827e+01,-6.16943296e+01, -4.60777877e+01, 3.75607122e+01,-4.91660025e+01, 1.15594921e+01,9.57377897e+00,-4.77335991e+01, 5.84531999e+01,-6.91577745e+01,2.73576790e-02, 2.03287535e+00,-1.61917982e+00, 3.65614314e+00,1.19923973e+00,-2.34658517e+00, 2.33271906e+00, 5.92493318e-01,3.52729217e-01, 4.02563694e+00,-3.44683108e+00, 5.55192762e+00},{ -5.99481873e+01,-1.67448739e+01,-1.65652833e+01,-1.10273243e+01, -5.98511576e+00,-6.83790060e+00,-3.30068287e+00,-7.43415205e+00,1.10804457e+00,-4.44905426e+00, 8.74841597e-01,-6.54525995e+00, -2.02652227e+00,-3.66765756e-01,-3.63172462e-01,-2.81763676e-01, -4.93413753e-02,-3.69102134e-01, 5.87478583e-01, 3.83199510e-01, -3.18475968e-02,-1.08189885e-01, 3.13855801e-01, 2.87945767e-01},{7.85959168e+01,-5.13280461e+01,-4.65660016e+00,-4.32863549e+01,1.19836493e+01,-5.49511133e+01, 1.57932061e+01,-1.31153660e+01, -1.12608174e+01, 2.03548632e+01,-1.19090241e+01,-9.84379329e+00,4.74626618e+00,-4.72468228e+00,-2.96645128e-01,-4.18810841e+00,2.03165296e+00, 1.34172045e+00,-2.54498458e+00, 6.63190395e+00, -6.62495026e+00, 5.30835585e+00,-3.96032329e+00, 1.61584655e+00},{5.00884903e+01,-5.24584808e+01, 1.01027248e+01,-6.04991045e+01,3.81138133e+00,-5.51048171e+01, 1.10202628e+01,-6.73410335e+01,2.57306164e+01,-5.20902792e+01, 3.91650668e+01,-6.55721169e+01,4.57285484e+01,-5.00043815e+01, 5.65530862e+00,-5.36652735e+01,2.58467916e+00,-4.80963325e+01, 1.22838857e+01,-6.13934581e+01,2.45010518e+01,-4.75789650e+01, 3.19699081e+01,-5.70932642e+01},{2.84241228e+01,-4.45367609e+01,-2.88745790e+01,-3.57422838e+01,1.45816705e+01,-6.25107754e+01, 2.11632832e+01,-7.36171793e+01,3.11111518e+01,-7.89209629e+01, 3.82047040e+01,-8.29726292e+01, -3.56180552e+00, 5.05499915e+00, 1.41721010e+00,-3.02741571e+00,2.01734389e+00,-1.89724923e+00, 1.84778947e+00,-1.38742026e+00,2.05058737e+00,-4.03179976e-01, 1.24412377e+00, 4.19479951e-01},{6.58978507e+01,-5.23703308e+01, 5.39279250e+01,-9.36517268e+01,9.41462472e+00,-3.23506713e+01,-5.54498302e+00, 9.99051431e+00, -3.07765168e+01, 2.68264365e+01,-1.91171054e+01,-9.13112672e+00, -2.40366010e+00, 3.19114071e+00, 4.46728933e-01, 2.20973847e+00,4.02190125e-01,-3.82495341e-02, 1.22460960e+00,-3.16519214e+00,3.56259601e+00,-2.99261547e+00, 1.59037072e+00,-1.16434391e+00}}");
//		double[] weights_old=convert2DoubleArray("{ 0.03974883,0.10822278,0.16134868,0.14444886,0.07536144,0.04980988,0.1210812, 0.04293161,0.1553259, 0.10172081}")[0];
//		double[][] covars_old=convert2DoubleArray("{{2427.34176061, 3016.70442341, 1827.0388857,2135.42213088,2476.58715678, 2689.12548867, 2830.07077334, 2871.55832921,2637.92786472, 2712.83152221, 2670.65170859, 2374.93372357,1520.7837899,2230.98264395, 1482.34724501, 2300.06043529,2034.28699313, 2317.28422524, 2247.01464255, 2528.52428658,2399.96531437, 2120.89198105, 2299.10058561, 2186.64499325},{ 524.15671694,542.53647906,555.27857644,805.94769865, 920.62969556, 1178.49390435, 1531.45443332, 1596.28115325,1511.59224453, 1396.86355785, 1486.87561205, 1417.95561894,34.74409109, 75.53451051,110.84186894,151.27816082, 216.17687562,263.35433966,339.32489691,382.15813789, 360.11547612,355.88370813,370.44143396,349.22912927},{2038.20207508, 3078.03745124, 2089.66222532, 2854.17000101,2505.45080488, 2946.02610569, 2922.2198388,3743.49803342,2819.11558621, 2901.07644436, 2862.41366928, 3181.38413587, 464.75890785,503.68956941,403.87123735,545.19666577, 694.36177514,715.23567385,809.93411858,897.80264966, 986.00634527,956.25759654,903.36023992,890.72102386},{3547.01025486, 7776.06065411, 6592.69693337, 8520.84373287,7776.86868038, 9279.47069102,10744.18891443, 8833.71834052, 11514.9983242, 12518.67732227,10873.13002512,11676.62308217, 656.75139079, 1153.04693547, 1049.30923857, 1333.5048915,1628.61817402, 1989.34614619, 2216.39067517, 2446.62326733,2722.6553634,2837.02990952, 2824.68312268, 2912.33132785},{1244.19416758, 7460.42943181, 2549.97722963, 3282.57028268,3247.51714514, 3643.64984775, 3685.88978083, 3929.49176768,3553.24645021, 3455.71374615, 3691.05702147, 4901.04272577, 286.70740676,910.47180017,579.90889726,731.54309467, 961.1647187,1272.2236637,1174.78735265, 1257.47746656,1124.78247675, 1275.32912286, 1207.03255583, 1270.64875657},{1328.05693427,187.24889708,231.10506785,242.22792648, 307.2131128, 314.76226749,455.78875887,455.72470634, 498.91795501,387.51714607,484.76331391,424.39483934, 313.92133228, 73.11063237, 86.1569491,99.34014719, 124.56897481,145.14704167,175.7801016, 218.47625011, 175.92308937,159.17404293,176.85409107,161.18231563},{2240.6951375,5170.66880923, 5809.34896999, 6030.73631891,5575.96913058, 4910.09045268, 5011.31430172, 4885.51104043,4356.45372481, 3906.06244544, 4092.15256116, 4148.72892507, 892.10195707, 1197.89192248, 1402.9987205,1311.95028341,1467.64155987, 1641.72356356, 1651.63351208, 1804.22506091,1833.51784782, 1953.31067483, 1924.79822955, 1641.59627793},{4237.27268026, 8754.52410417, 8039.74352346, 9477.75483059,8886.96090977,10966.81768559,11297.30139261,12948.61595997, 10200.5738193, 11856.11875677,11885.513064,10037.70432011,4259.48537955, 8399.37564118, 7549.99573331, 9063.80647815,8224.27553788,10107.72492286,10492.64386408,12575.04096036,9536.32763572,11535.33648933,11291.65086331, 9857.95176305},{3335.32919339, 6489.78357668, 5444.17776387, 6689.89724935,5856.68936519, 6683.29934279, 7555.00061671, 8167.70253117,9312.54524921, 9423.30598373,11789.57858591,11108.86059983, 159.40900882,324.64552599,441.52320073,521.84311063, 583.33216374,723.54882475,770.84752177,940.39492752,1047.15989478, 1086.10874119, 1216.4806921,1124.99965206},{ 969.9991721,5026.70931761, 2677.68901249, 2759.93963055,2751.05932759, 3063.02436416, 3443.00929239, 3174.36825625,2882.58695492, 2680.80519024, 2723.49800058, 2989.21943847, 138.93793624,337.1317219, 365.83381532,479.54476319, 557.49239249,615.43579137,642.41612392,679.23211005, 661.29691471,814.16054246,711.06512135,716.00592347}}");
//		GMMPredict gmm_old = new GMMPredict(means_old, covars_old, weights_old);
		GMMPredict gmm_old = new GMMPredict("models/_old.model");

		
//		
//		double[][] means_adult=convert2DoubleArray("{{2.91389861e+01, 8.67502891e-01,-8.89458032e+00,-4.01821616e+01, -1.86227878e+00,-2.02180613e+00, 4.02467939e+01,-1.42601894e+01,1.41703330e+01, 6.81820151e+00, 1.55693861e+01,-2.35646851e+01, -7.84957537e-02, 3.29017438e+00, 3.59750689e+00, 2.24959982e+00,1.90730279e+00,-2.94773510e+00,-2.83698734e+00, 1.48396371e+00,4.32691366e-01,-5.97459200e-01, 9.04523451e-01, 2.58931087e-01},{1.62416528e+00, 4.03034938e+00,-1.58433762e+01,-7.77858756e+00, -4.82974617e+00,-3.97953324e+00, 2.59529827e+01, 7.13672584e+00,4.57307418e+00, 9.61593887e+00, 1.57066460e+01,-1.01761639e+01, -2.71935141e+00,-1.22398907e+01,-1.83630133e+01, 3.91793179e+00,4.72919363e+00, 7.94449532e-01, 3.99309511e+00, 5.62799626e+00, -1.01202635e+00,-7.06757334e+00,-3.88835041e+00,-4.10184398e+00},{ -4.51446613e+01, 9.21477814e+00, 3.27850303e+01,-6.28155166e+01, -6.86043903e+01, 3.14331956e+01, 1.99442824e+01,-2.14909624e+01,4.70179821e+01, 1.97751756e+01, 1.49470157e+01,-4.05463414e+01, -5.97248273e-01,-6.94913223e-01, 3.61826427e-01,-2.41909956e-01, -4.66851721e+00, 6.63468087e-01, 1.27716538e+00,-2.60249840e+00, -1.30920020e+00,-9.18553588e-01,-1.21123102e+00,-2.81715249e+00},{2.06907613e+01, 2.59048100e-01,-3.43098134e+00,-4.61245879e+01, -1.35297272e+01,-1.67780139e+01, 2.84984410e+01,-1.41482294e+01,1.65728796e+01, 3.20738966e+00, 2.17754416e+01,-3.00418815e+01,1.72528427e+01, 4.57864756e+00,-6.16322650e+00,-3.56454627e+01, -8.97277586e+00,-9.33712532e+00, 2.23695942e+01,-9.85378826e+00,1.31733037e+01, 5.24306368e+00, 1.69135441e+01,-2.21657276e+01},{2.58420946e+01, 6.43003573e+01, 1.62139223e+01,-9.79000377e+01, -1.19810290e+01,-2.25935883e+01, 4.75683033e+00, 6.97318280e+00,3.51124308e+01, 2.20152900e+01, 4.29763776e+01,-1.56201901e+01,1.39940938e+00,-4.97005065e+00,-9.17590402e-01, 2.43836590e+00,2.61794205e+00, 5.83506387e+00, 2.93535193e+00, 1.50062177e+00,1.12283577e+00, 1.93717132e+00,-1.87265546e-01, 3.59730281e+00},{5.71869009e+01,-4.12047672e+00,-4.64672313e+01,-4.49999333e+00,6.97428568e+00,-2.46214617e+01, 2.35057699e+01, 2.22531167e+01,1.66492037e+01, 3.77515075e+00, 1.51396598e+01,-1.11949579e+01, -4.93846790e+00, 9.42487136e+00, 1.90915650e+01,-7.17320210e-01, -5.74605759e+00,-5.50620270e-01,-5.90959074e-01,-3.92677529e+00, -2.49483663e+00, 5.17550739e+00, 2.88976835e+00, 3.45090706e+00},{2.31321597e+01, 7.13210661e+01, 4.33620140e+01,-6.60033465e-01, -4.77578380e+00,-1.84585846e+01,-1.24632713e+01,-1.38067557e+01, -1.27071996e+01, 8.85883584e+00, 1.51478654e+01, 3.04852067e+00, -7.62917828e+00,-5.18385709e+00,-1.34912407e+00, 2.87306689e+00,2.74977607e+00, 6.52538048e+00, 9.50240226e-01, 7.53136733e-01,1.54231670e+00, 1.36999628e+00, 5.22391980e-01, 5.63782882e-01},{ -1.03820973e+01, 3.65389245e+01, 4.22497748e+00,-2.54635586e+01, -9.78629494e+00,-1.56623801e+01, 1.95680848e+00,-9.75884027e+00,3.58551402e+00, 1.05371900e+01, 1.25911834e+01,-1.38903026e+01,1.42267210e+01, 2.14093167e+01, 1.05555468e+01,-1.17800255e+01, -5.22245344e+00,-9.27802026e+00,-7.30856951e+00,-4.05622211e+00,1.11904682e+00, 4.86426836e+00, 5.09745859e+00,-6.93237377e-01},{ -2.18311325e+01, 6.26541877e-01, 1.92178068e-01,-1.42858777e+01, -2.12293065e+00, 1.54707957e+00, 2.69314973e+00,-9.83148045e+00,1.56624555e+00, 4.31841111e+00, 1.31673849e+01,-1.02190052e+01, -3.45341859e+00,-9.03364251e-01,-1.77014573e+00,-1.52671804e+00, -1.20132955e+00,-6.22399365e-01, 6.58845729e-02,-1.70063212e+00, -1.19630260e+00, 1.15442495e-01,-1.53880416e-01,-2.59865480e-01},{3.30243576e+01,-3.48251518e+01,-1.81610413e+01,-4.64627999e+01, -5.45508922e+00,-3.59659854e+01, 5.74603510e+01,-4.57650379e+01,3.73794187e+01,-2.46875804e+01, 1.26935912e+01,-4.97385443e+01,1.96734048e+00,-3.18036640e+00,-3.55007215e+00, 1.73379557e+00,1.94858610e+00, 2.56578750e+00, 2.44268670e+00,-4.23515254e-01,3.38866929e+00,-2.07066675e+00, 1.31365303e-01, 5.52273092e-01}}");
//		double[] weights_adult=convert2DoubleArray("{ 0.11453711,0.13945913,0.07022794,0.05316095,0.08230294,0.09661545,0.08654217,0.11427089,0.14176767,0.10111576}")[0];
//		double[][] covars_adult=convert2DoubleArray("{{ 1288.21080443,3794.83586761,1821.51425087,1990.12963545, 3291.69023989,4223.51079857,3382.27431497,3609.94838825, 4328.81707325,3490.53751413,3422.33475248,2885.44704402, 48.06744007, 151.98235232, 154.77821684, 245.90508439,262.52094753, 332.37090147, 380.38638098, 381.58292847,439.93756394, 395.93160124, 394.84790641, 383.56445221},{ 2364.98090284,1727.95485616,1942.00434558,1697.10901459, 2229.16472519,2081.68069208,2475.993235,2130.29794096, 2343.95611257,1773.73493972,1642.05323357,1427.24560222, 1189.52040674, 478.32122823, 473.0796752,639.31739139,776.28194746, 701.12490283, 890.79329598, 747.47698005,707.48939472, 678.75183506, 595.00067467, 539.98763949},{ 3017.46833299,2015.75490123,1915.09002172,2593.24413363, 4148.15957611,3509.71220597,2504.67843585,3098.69495192, 2715.25129007,2693.55971007,2335.31908803,2040.69705537, 1038.86677398, 289.68406488, 269.51961916, 417.88436344,528.63384388, 518.67373251, 572.87379984, 542.81749286, 547.8455159,460.32676573, 483.47364091, 463.30847624},{ 2754.82730473,4783.82158625,4107.16808028,3696.23529516, 4987.87804577,4632.51062686,4509.61985862,4210.3785582, 4717.44974723, 3985.18167905,4106.52208147,3740.9176409, 2461.44453643, 3863.28218212,3582.81631823,3511.68229679,4069.88400171, 4002.19929657,4151.64400381,3888.41147782,4208.30747063, 3617.08339509,3833.23917234,3484.24708112},{728.1832677, 1420.80324233,1501.31968783,2003.04567163, 3239.42056189,3166.98058861,2808.92893123,2086.57264063, 2583.20006718,2634.10139182,3084.39901306,3693.78085609,254.45958895, 472.77175188, 271.83512929, 929.01664591,518.75613761, 780.39963498, 553.95130131, 590.71344505,710.81468559, 627.3515994,722.27497508, 792.80924709},{452.75825846,1536.27012332,2654.57280277,1482.19147102, 3251.86421383,3058.18375809,3780.165552,3039.75912007, 3345.13962101,2786.56013596,1936.61484163,2037.61006345,218.45839757, 277.81456909, 514.16104972, 408.93438596,481.58654127, 596.97981918, 794.22538787, 666.91913982,672.11962519, 639.06130764, 490.38167085, 513.59482162},{513.48454163,1129.7595511,805.93996616,1572.48430275, 1851.48179041,1533.23301106,2164.26664101,1702.79712909,2061.772463, 1643.57600264,2010.06553459,1495.58002378, 293.06667455,357.43228583, 334.21832824, 360.8193259,397.36938918,408.78661596, 543.02681738, 431.74931508, 442.64049801, 436.261269,459.88531558, 330.17807897},{ 2310.15519838,1962.37656325,1621.90069827,2049.98495126,1839.4637915, 2151.04838487,1950.79913767,1863.14195278,1966.89486247,1976.1683164, 2339.28947604,2695.80840782,1105.51439737, 551.10577827,594.40641311, 754.77408106, 609.46864665, 783.95054585,750.10605521, 744.22058692, 770.04974622, 811.96626647,912.44893748, 876.7906474 },{ 1593.66536221, 685.56353126, 783.04859022, 944.39349065, 1190.52210551,1179.49397847,1243.69785804,1513.99848536, 1456.05578939,1355.22544514,1362.2782745, 1368.02446686,159.41532639, 132.66706391, 152.31050802, 204.08898513,233.33207246, 284.49566096, 301.8628919,320.62453191,348.27168582, 362.85405873, 326.27847998, 306.05111877},{ 1392.59581899,3904.08795826,5230.0476826, 3297.24104386, 5887.70950784,7084.87304177,4940.405418,5705.49151201, 6820.89903761,6380.74336603,6360.23769907,5898.01163761,313.43095708, 636.95636936, 729.74651824, 655.99926637,892.72677853,1054.18722678,1092.27764387,1221.95738349, 1257.90129087,1231.41858496,1201.91992083,1129.52216845}}");
//		GMMPredict gmm_adult = new GMMPredict(means_adult, covars_adult, weights_adult);
		GMMPredict gmm_adult = new GMMPredict("models/_adult.model");

		
		List<String> lines = FileUtils.readLines("output/ageFrames_bul0001.csv");
		Map<String, List<String>> dataMap = new LinkedHashMap<String, List<String>>();
		dataMap.put("_adult", new ArrayList<String>());
		dataMap.put("_old", new ArrayList<String>());
		dataMap.put("_young", new ArrayList<String>());
		String line = null;
		String label = null;
		for (int i = 0; i < lines.size(); i++) {
			line = lines.get(i).substring(0,lines.get(i).lastIndexOf(','));
			label = lines.get(i).substring(lines.get(i).lastIndexOf(',') + 1);

			dataMap.get(label).add(line);
		}
		
		
		List<String> inputList = null;
		String[] strArray = null;
		double[][] features = null;
		String predictCategory = null;
		int[][] confusionMatrix=new int[3][3];
		
		int categoryIndex = 0;
		for (String category:dataMap.keySet()) {
			
			inputList = dataMap.get(category);
			
			int index = 0;
			features = new double[62][24];
			for(String input:inputList){
				strArray = input.split(",");
				for(int j=0;j<strArray.length;j++){
					features[index][j]=Double.valueOf(strArray[j]);
				}
				index++;
				
				if(index ==62){
					double maxScore = gmm_adult.getScore(features);
					predictCategory="_adult";
						
					double currentScore = gmm_old.getScore(features);
					if(currentScore>maxScore){
						maxScore = currentScore;
						predictCategory="_old";
					}
					
				 	currentScore = gmm_young.getScore(features);
					if(currentScore>maxScore){
						maxScore = currentScore;
						predictCategory="_young";
					}
					
					
					if("_adult".equalsIgnoreCase(predictCategory)){
						confusionMatrix[categoryIndex][0]=confusionMatrix[categoryIndex][0]+1;
					}else if("_old".equalsIgnoreCase(predictCategory)){
						confusionMatrix[categoryIndex][1]=confusionMatrix[categoryIndex][1]+1;
					}else{
						confusionMatrix[categoryIndex][2]=confusionMatrix[categoryIndex][2]+1;
					}
					
					
					index=0;
					features = new double[62][24];
				}
			}
			
			categoryIndex++;
		}
		
		System.out.println("#	adult	old	young");
		for(int i=0;i<3;i++){
			if(i==0)
			System.out.println("adult	"+confusionMatrix[i][0]+"	"+confusionMatrix[i][1]+"	"+confusionMatrix[i][2]);
			if(i==1)
				System.out.println("old	"+confusionMatrix[i][0]+"	"+confusionMatrix[i][1]+"	"+confusionMatrix[i][2]);
			if(i==2)
				System.out.println("young	"+confusionMatrix[i][0]+"	"+confusionMatrix[i][1]+"	"+confusionMatrix[i][2]);
		}
	}
	
	/**
	 * only support to convert 1-D or 2-D array
	 * @param text
	 * @return 
	 */
	private static double[][] convert2DoubleArray(String text){
		if(text ==null){
			return null;
		}
		
		text = text.trim();
		String[] lineArray = text.split("\\},\\{");
		
		double[][] array = null;
		if(lineArray.length <=1){
			String[] tmpArray = text.replaceAll("[\\{\\}]", "").split(",");
			array = new double[1][tmpArray.length];
			for(int i=0;i<tmpArray.length;i++){
				array[0][i]=Double.valueOf(tmpArray[i].trim());
			}
			
			return array;
		}else{
			for(int i=0;i<lineArray.length;i++){
				System.out.println(lineArray[i]);
				String[] tmpArray = lineArray[i].replaceAll("[\\{\\}\\s]", "").split(",");
				if(array == null){
					array = new double[lineArray.length][tmpArray.length];
				}
				for(int j=0;j<tmpArray.length;j++){
					array[i][j]=Double.valueOf(tmpArray[j].trim());
				}
			}
			
			return array;
		}
	}
}
